require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe CommentsController, type: :controller do
  let(:article) { create :article }

  describe "GET /index" do
    it "renders a successful response" do
      subject { get :index, params: { article_id: article.id } }
      expect(response).to have_http_status(:ok)
    end
  end

  describe "POST /create" do

    context "when not authorized" do
      subject { post :create, params: { article_id: article.id } }
      it_behaves_like 'forbidden_requests'
    end

    context "when authorized" do
      let(:user) { create :user }
      let(:access_token) { user.create_access_token }
      before { request.headers['authorization'] = "Bearer #{access_token.token}" }

      context "with valid parameters" do
        let(:valid_attributes) { { content: "My valid comment" } }

        it "creates a new Comment" do
          subject { post :create, params: valid_attributes.merge({ user_id: user.id, article_id: article.id }) }
          expect { subject }.to change { article.comments.count }.by(1)
        end

        it "renders a JSON response with the new comment" do
          subject { post :create, params: valid_attributes.merge({ user_id: user.id, article_id: article.id }) }
          expect(response).to have_http_status(:created)
          # expect(response.content_type).to match(a_string_including("application/json"))
        end
      end

      context "with invalid parameters" do
        let(:invalid_attributes) { { content: "" } }

        it "does not create a new Comment" do
          subject { post :create, params: invalid_attributes.merge({ user_id: user.id, article_id: article.id }) }
          expect { subject }.to change { article.comments.count }.by(0)
        end

        it "renders a JSON response with errors for the new comment" do
          subject { post :create, params: invalid_attributes.merge({ user_id: user.id, article_id: article.id }) }
          expect(response).to have_http_status(:unprocessable_entity)
          # expect(response.content_type).to match(a_string_including("application/json"))
        end
      end
    end
  end
end
